//////////Copy updation
const express = require("express");
const app = express();
const mongoose = require("mongoose");

const studentModel = require("./models/student");
const deployedModel = require("./models/deployed");
const freezeModel = require("./models/freeze");

mongoose.connect("mongodb://localhost:27017/edu", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Middleware to check for deployedStatus or freezedStatus update
async function checkAndTransferStatus(req, res, next) {
    const { prn, deployedStatus, freezedStatus } = req.body;

    try {
        const student = await studentModel.findOne({ prn });

        if (!student) {
            return res.status(404).send("Student not found.");
        }

        // Check for deployedStatus change
        if (deployedStatus === true && student.deployedStatus === false) {
            // Move to deployed collection
            await deployedModel.create({
                prn: student.prn,
                name: student.name,
                class: student.class,
                deployedStatus: true,
            });

            // Optionally update or delete original student record
            await studentModel.updateOne({ prn }, { deployedStatus: true });

            console.log(`Student ${student.prn} moved to deployed collection.`);
        }

        // Check for freezedStatus change
        if (freezedStatus === true && student.freezedStatus === false) {
            // Move to freeze collection
            await freezeModel.create({
                prn: student.prn,
                name: student.name,
                class: student.class,
                freezedStatus: true,
            });

            // Optionally update or delete original student record
            await studentModel.updateOne({ prn }, { freezedStatus: true });

            console.log(`Student ${student.prn} moved to freeze collection.`);
        }

        // Proceed with the request
        next();
    } catch (error) {
        console.error("Error during status update:", error);
        res.status(500).send("Internal Server Error");
    }
}

// Route to update status
app.put("/update-status", checkAndTransferStatus, (req, res) => {
    res.status(200).send("Student status updated and moved to corresponding collection.");
});

app.listen(3000, () => {
    console.log("Server is running on port 3000.");
});
